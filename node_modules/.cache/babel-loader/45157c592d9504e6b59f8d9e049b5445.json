{"ast":null,"code":"//Brian Design. (2020, August 31). React Form Validation Using Custom Hooks Tutorial—Beginner React JS Project. https://www.youtube.com/watch?v=KGFG-yQD7Dw\nimport { object } from \"prop-types\";\nimport { useState, useEffect } from \"react\";\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\"\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\nexport default useForm; // import { useState, useEffect } from \"react\";\n// const useForm = (validate) => {\n//   const [values, setValues] = useState({\n//     username: \"\",\n//     email: \"\",\n//     password: \"\",\n//     password2: \"\",\n//   });\n//   const [errors, setErrors] = useState({});\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const handleChange = (e) => {\n//     //e short for events function\n//     const { name, value } = e.target;\n//     setValues({\n//       ...values,\n//       [name]: value,\n//     });\n//   };\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setErrors(validate(values));\n//     setIsSubmitting(true);\n//   };\n//   return { handleChange, values, handleSubmit, errors };\n// };\n// export default useForm;","map":{"version":3,"sources":["/home/praptiankush-mane/public_html/testing/kaylajolly/src/components/pages/useForm.js"],"names":["object","useState","useEffect","useForm","callback","validate","values","setValues","username","email","password","password2","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","name","value","target","handleSubmit","preventDefault","Object","keys","length"],"mappings":"AAAA;AAEA,SAASA,MAAT,QAAuB,YAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACnCO,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,KAAK,EAAE,EAF4B;AAGnCC,IAAAA,QAAQ,EAAE,EAHyB;AAInCC,IAAAA,SAAS,EAAE;AAJwB,GAAD,CAApC;AAMA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMe,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAb,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACY,IAAD,GAAQC;AAFA,KAAD,CAAT;AAID,GAND;;AAQA,QAAME,YAAY,GAAIJ,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACK,cAAF;AAEAT,IAAAA,SAAS,CAACR,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAS,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GALD;;AAOAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/B,IAAoCX,YAAxC,EAAsD;AACpDV,MAAAA,QAAQ;AAET;AACF,GALQ,EAKN,CAACQ,MAAD,CALM,CAAT;AAOA,SAAO;AAAEI,IAAAA,YAAF;AAAgBK,IAAAA,YAAhB;AAA8Bf,IAAAA,MAA9B;AAAsCM,IAAAA;AAAtC,GAAP;AACD,CAjCD;;AAmCA,eAAeT,OAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["//Brian Design. (2020, August 31). React Form Validation Using Custom Hooks Tutorial—Beginner React JS Project. https://www.youtube.com/watch?v=KGFG-yQD7Dw\r\n\r\nimport { object } from \"prop-types\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst useForm = (callback, validate) => {\r\n  const [values, setValues] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    password2: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    setErrors(validate(values));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && isSubmitting) {\r\n      callback();\r\n    \r\n    }\r\n  }, [errors]);\r\n\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useForm;\r\n\r\n// import { useState, useEffect } from \"react\";\r\n\r\n// const useForm = (validate) => {\r\n//   const [values, setValues] = useState({\r\n//     username: \"\",\r\n//     email: \"\",\r\n//     password: \"\",\r\n//     password2: \"\",\r\n//   });\r\n//   const [errors, setErrors] = useState({});\r\n//   const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n//   const handleChange = (e) => {\r\n//     //e short for events function\r\n//     const { name, value } = e.target;\r\n//     setValues({\r\n//       ...values,\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     setErrors(validate(values));\r\n//     setIsSubmitting(true);\r\n//   };\r\n\r\n//   return { handleChange, values, handleSubmit, errors };\r\n// };\r\n\r\n// export default useForm;\r\n"]},"metadata":{},"sourceType":"module"}